"""
This type stub file was generated by pyright.
"""

from . import core
from .core import wrap_function

"""
Calculation functions for technical analysis indicators.

The function names are all lower case and may conflict with standard functions,
so the best way to use this module is to alias it to a short name
like `ta` and access all functions as attributes.

The first parameter `series` or `prices` indicates whether the function
accepts a single series or a prices dataframe.

Functions that accept a series usually have an optional parameter `item`
to specify which column to use if the input is a dataframe.

All functions wrap their output to match the type of their input.

In particular the result of a function applied to a pandas series or dataframes
will have the same index as the input.
"""
nan = ...
def __getattr__(name): # -> Any:
    ...

__all__ = ()
@wrap_function(core.calc_price)
def price(prices, item: str = ...):
    ...

@wrap_function(core.calc_avgprice)
def avgprice(prices):
    ...

@wrap_function(core.calc_typprice)
def typprice(prices):
    ...

@wrap_function(core.calc_wclprice)
def wclprice(prices):
    ...

@wrap_function(core.calc_midprice)
def midprice(prices):
    ...

@wrap_function(core.calc_crossover)
def crossover(series, level: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_crossunder)
def crossunder(series, level: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_flag)
def flag(series, *, item: str = ...):
    ...

@wrap_function(core.calc_updown)
def updown(series, up_level: float = ..., down_level: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_sign)
def sign(series, na_value: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_step)
def step(series, threshold: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_clag)
def clag(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_abs)
def abs(series, *, item: str = ...):
    ...

@wrap_function(core.calc_log)
def log(series, *, item: str = ...):
    ...

@wrap_function(core.calc_exp)
def exp(series, *, item: str = ...):
    ...

@wrap_function(core.calc_shift)
def shift(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_diff)
def diff(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_lag)
def lag(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_min)
def min(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_max)
def max(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_sum)
def sum(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_roc)
def roc(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_lroc)
def lroc(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_mad)
def mad(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_stdev)
def stdev(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_mav)
def mav(series, period: int = ..., *, ma_type: str = ..., item: str = ...):
    ...

@wrap_function(core.calc_sma)
def sma(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_ema)
def ema(series, period: int, *, adjust: bool = ..., item: str = ...):
    ...

@wrap_function(core.calc_rma)
def rma(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_wma)
def wma(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_hma)
def hma(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_dema)
def dema(series, period: int, *, item: str = ...):
    ...

@wrap_function(core.calc_tema)
def tema(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_alma)
def alma(series, period: int = ..., offset: float = ..., sigma: float = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_rsi)
def rsi(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_dmi)
def dmi(prices, period: int = ...):
    ...

@wrap_function(core.calc_adx)
def adx(prices, period: int = ...):
    ...

@wrap_function(core.calc_pdi)
def pdi(prices, period: int = ...):
    ...

@wrap_function(core.calc_mdi)
def mdi(prices, period: int = ...):
    ...

@wrap_function(core.calc_trange)
def trange(prices, *, log_prices: bool = ..., percent: bool = ...):
    ...

@wrap_function(core.calc_atr)
def atr(prices, period: int = ...):
    ...

@wrap_function(core.calc_natr)
def natr(prices, period: int = ...):
    ...

@wrap_function(core.calc_sar)
def sar(prices, afs: float = ..., maxaf: float = ...):
    ...

@wrap_function(core.calc_cci)
def cci(prices, period: int = ...):
    ...

@wrap_function(core.calc_cmf)
def cmf(prices, period: int = ...):
    ...

@wrap_function(core.calc_mfi)
def mfi(prices, period: int = ...):
    ...

@wrap_function(core.calc_bop)
def bop(prices, period: int = ...):
    ...

@wrap_function(core.calc_bbands)
def bbands(prices, period: int = ..., nbdev: float = ...):
    ...

@wrap_function(core.calc_keltner)
def keltner(prices, period: int = ..., nbatr: float = ...):
    ...

@wrap_function(core.calc_ker)
def ker(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_kama)
def kama(series, period: int = ..., fastn: int = ..., slown: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_macd)
def macd(series, n1: int = ..., n2: int = ..., n3: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_ppo)
def ppo(series, n1: int = ..., n2: int = ..., n3: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_slope)
def slope(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_rvalue)
def rvalue(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_tsf)
def tsf(series, period: int = ..., offset: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_curve)
def curve(series, period: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_qsf)
def qsf(series, period: int = ..., offset: int = ..., *, item: str = ...):
    ...

@wrap_function(core.calc_stoch)
def stoch(prices, period: int = ..., fastn: int = ..., slown: int = ...):
    ...

@wrap_function(core.calc_streak)
def streak(series, *, item: str = ...):
    ...

@wrap_function(core.calc_eval)
def eval(prices, expr: str, *, as_flag: bool = ...):
    ...

