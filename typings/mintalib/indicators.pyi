"""
This type stub file was generated by pyright.
"""

from . import core
from .core import wrap_indicator

"""
Factory functions for technical analysis indicators.

Indicator factory names are all upper case.

Indicators offer a composable interface where a calculation routine
is bound together with its calculation parameters.

An indicator object is a callable that can be applied to prices or series data.

Indicators can be chained with the `@` operator as in `ROC(1) @ SMA(20)`.

The `@` operator can also be used to apply an indicator to its parameter.

So for example `SMA(50) @ prices` can be used to compute the 50 period simple moving average on `prices`,
instead of the more verbose `SMA(50)(prices)`.
"""
nan = ...
@wrap_indicator(core.calc_price)
def PRICE(item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_avgprice)
def AVGPRICE(): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_typprice)
def TYPPRICE(): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_wclprice)
def WCLPRICE(): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_midprice)
def MIDPRICE(): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_crossover)
def CROSSOVER(level: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_crossunder)
def CROSSUNDER(level: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_flag)
def FLAG(*, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_updown)
def UPDOWN(up_level: float = ..., down_level: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_sign)
def SIGN(na_value: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_step)
def STEP(threshold: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_clag)
def CLAG(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_abs)
def ABS(*, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_log)
def LOG(*, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_exp)
def EXP(*, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_shift)
def SHIFT(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_diff)
def DIFF(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_lag)
def LAG(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_min)
def MIN(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_max)
def MAX(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_sum)
def SUM(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_roc)
def ROC(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_lroc)
def LROC(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_mad)
def MAD(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_stdev)
def STDEV(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_mav)
def MAV(period: int = ..., *, ma_type: str = ..., item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_sma)
def SMA(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_ema)
def EMA(period: int, *, adjust: bool = ..., item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_rma)
def RMA(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_wma)
def WMA(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_hma)
def HMA(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_dema)
def DEMA(period: int, *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_tema)
def TEMA(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_alma)
def ALMA(period: int = ..., offset: float = ..., sigma: float = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_rsi)
def RSI(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_dmi)
def DMI(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_adx)
def ADX(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_pdi)
def PDI(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_mdi)
def MDI(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_trange)
def TRANGE(*, log_prices: bool = ..., percent: bool = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_atr)
def ATR(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_natr)
def NATR(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_sar)
def SAR(afs: float = ..., maxaf: float = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_cci)
def CCI(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_cmf)
def CMF(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_mfi)
def MFI(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_bop)
def BOP(period: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_bbands)
def BBANDS(period: int = ..., nbdev: float = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_keltner)
def KELTNER(period: int = ..., nbatr: float = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_ker)
def KER(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_kama)
def KAMA(period: int = ..., fastn: int = ..., slown: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_macd)
def MACD(n1: int = ..., n2: int = ..., n3: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_ppo)
def PPO(n1: int = ..., n2: int = ..., n3: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_slope)
def SLOPE(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_rvalue)
def RVALUE(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_tsf)
def TSF(period: int = ..., offset: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_curve)
def CURVE(period: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_qsf)
def QSF(period: int = ..., offset: int = ..., *, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_stoch)
def STOCH(period: int = ..., fastn: int = ..., slown: int = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_streak)
def STREAK(*, item: str = ...): # -> FuncIndicator:
    ...

@wrap_indicator(core.calc_eval)
def EVAL(expr: str, *, as_flag: bool = ...): # -> FuncIndicator:
    ...

__all__ = ['PRICE', 'AVGPRICE', 'TYPPRICE', 'WCLPRICE', 'MIDPRICE', 'CROSSOVER', 'CROSSUNDER', 'FLAG', 'UPDOWN', 'SIGN', 'STEP', 'CLAG', 'ABS', 'LOG', 'EXP', 'SHIFT', 'DIFF', 'LAG', 'MIN', 'MAX', 'SUM', 'ROC', 'LROC', 'MAD', 'STDEV', 'MAV', 'SMA', 'EMA', 'RMA', 'WMA', 'HMA', 'DEMA', 'TEMA', 'ALMA', 'RSI', 'DMI', 'ADX', 'PDI', 'MDI', 'TRANGE', 'ATR', 'NATR', 'SAR', 'CCI', 'CMF', 'MFI', 'BOP', 'BBANDS', 'KELTNER', 'KER', 'KAMA', 'MACD', 'PPO', 'SLOPE', 'RVALUE', 'TSF', 'CURVE', 'QSF', 'STOCH', 'STREAK', 'EVAL']
