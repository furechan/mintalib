"""
This type stub file was generated by pyright.
"""

from typing import Callable
from functools import cached_property
from abc import ABCMeta, abstractmethod

"""Model classes"""
class Indicator(metaclass=ABCMeta):
    """Abstact Base class for Indicators"""
    __repr__ = ...
    @abstractmethod
    def __call__(self, data): # -> None:
        ...
    
    def __matmul__(self, other): # -> ComposedIndicator | None:
        ...
    
    def get_series(self, data):
        """Series data accessor"""
        ...
    
    def alias(self, name: str): # -> AliasedIndicator:
        ...
    


class AliasedIndicator(Indicator):
    """Aliased Indicator"""
    def __init__(self, indicator, name) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __call__(self, data):
        ...
    


class FuncIndicator(Indicator):
    """Function based Indicator"""
    output_name: str = ...
    @staticmethod
    def indicator_name(func):
        ...
    
    def __init__(self, name: str, func: Callable, params: dict) -> None:
        ...
    
    @cached_property
    def input_type(self): # -> str | None:
        ...
    
    def alias_legacy(self, name): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __call__(self, prices):
        ...
    


class ComposedIndicator(Indicator):
    """Composition of Indicators"""
    def __init__(self, *chain) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __call__(self, data):
        ...
    


