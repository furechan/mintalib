
""" Mintalib Indicators """

# Do not edit! This file was generated by make-indicators.ipynb

from . import core
from .core import wrap_function
from .model import FuncIndicator

nan = float('nan')


@wrap_function(core.AVGPRICE)
def AVGPRICE():
    return FuncIndicator.wrap(core.AVGPRICE, params=locals())


@wrap_function(core.TYPPRICE)
def TYPPRICE():
    return FuncIndicator.wrap(core.TYPPRICE, params=locals())


@wrap_function(core.WCLPRICE)
def WCLPRICE():
    return FuncIndicator.wrap(core.WCLPRICE, params=locals())


@wrap_function(core.MIDPRICE)
def MIDPRICE():
    return FuncIndicator.wrap(core.MIDPRICE, params=locals())


@wrap_function(core.PRICE)
def PRICE(item: str = None):
    return FuncIndicator.wrap(core.PRICE, params=locals())


@wrap_function(core.CROSSOVER)
def CROSSOVER(level: float = 0.0, *, item: str = None):
    return FuncIndicator.wrap(core.CROSSOVER, params=locals())


@wrap_function(core.CROSSUNDER)
def CROSSUNDER(level: float = 0.0, *, item: str = None):
    return FuncIndicator.wrap(core.CROSSUNDER, params=locals())


@wrap_function(core.FLAG_ABOVE)
def FLAG_ABOVE(level: float = 0.0, *, item: str = None):
    return FuncIndicator.wrap(core.FLAG_ABOVE, params=locals())


@wrap_function(core.FLAG_BELOW)
def FLAG_BELOW(level: float = 0.0, *, item: str = None):
    return FuncIndicator.wrap(core.FLAG_BELOW, params=locals())


@wrap_function(core.FLAG_INVERT)
def FLAG_INVERT(*, item: str = None):
    return FuncIndicator.wrap(core.FLAG_INVERT, params=locals())


@wrap_function(core.FLAG_UPDOWN)
def FLAG_UPDOWN(up_level: float = 0.0, down_level: float = 0.0, *, item: str = None):
    return FuncIndicator.wrap(core.FLAG_UPDOWN, params=locals())


@wrap_function(core.LOG)
def LOG(*, item: str = None):
    return FuncIndicator.wrap(core.LOG, params=locals())


@wrap_function(core.EXP)
def EXP(*, item: str = None):
    return FuncIndicator.wrap(core.EXP, params=locals())


@wrap_function(core.ROC)
def ROC(period: int = 1, *, item: str = None):
    return FuncIndicator.wrap(core.ROC, params=locals())


@wrap_function(core.DIFF)
def DIFF(period: int = 1, *, item: str = None):
    return FuncIndicator.wrap(core.DIFF, params=locals())


@wrap_function(core.MIN)
def MIN(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.MIN, params=locals())


@wrap_function(core.MAX)
def MAX(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.MAX, params=locals())


@wrap_function(core.SUM)
def SUM(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.SUM, params=locals())


@wrap_function(core.MAD)
def MAD(period: int = 20, *, item: str = None):
    return FuncIndicator.wrap(core.MAD, params=locals())


@wrap_function(core.STDEV)
def STDEV(period: int = 20, *, item: str = None):
    return FuncIndicator.wrap(core.STDEV, params=locals())


@wrap_function(core.SMA)
def SMA(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.SMA, params=locals())


@wrap_function(core.EMA)
def EMA(period: int, *, adjust: bool = False, item: str = None):
    return FuncIndicator.wrap(core.EMA, params=locals())


@wrap_function(core.RMA)
def RMA(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.RMA, params=locals())


@wrap_function(core.WMA)
def WMA(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.WMA, params=locals())


@wrap_function(core.HMA)
def HMA(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.HMA, params=locals())


@wrap_function(core.DEMA)
def DEMA(period: int, *, item: str = None):
    return FuncIndicator.wrap(core.DEMA, params=locals())


@wrap_function(core.TEMA)
def TEMA(period: int = 20, *, item: str = None):
    return FuncIndicator.wrap(core.TEMA, params=locals())


@wrap_function(core.MA)
def MA(period: int = 20, *, ma_type: str = None, item: str = None):
    return FuncIndicator.wrap(core.MA, params=locals())


@wrap_function(core.RSI)
def RSI(period: int = 14, *, item: str = None):
    return FuncIndicator.wrap(core.RSI, params=locals())


@wrap_function(core.PLUSDI)
def PLUSDI(period: int = 14):
    return FuncIndicator.wrap(core.PLUSDI, params=locals())


@wrap_function(core.MINUSDI)
def MINUSDI(period: int = 14):
    return FuncIndicator.wrap(core.MINUSDI, params=locals())


@wrap_function(core.ADX)
def ADX(period: int = 14):
    return FuncIndicator.wrap(core.ADX, params=locals())


@wrap_function(core.TRANGE)
def TRANGE(*, log_prices: bool = False, percent: bool = False):
    return FuncIndicator.wrap(core.TRANGE, params=locals())


@wrap_function(core.ATR)
def ATR(period: int = 14):
    return FuncIndicator.wrap(core.ATR, params=locals())


@wrap_function(core.NATR)
def NATR(period: int = 14):
    return FuncIndicator.wrap(core.NATR, params=locals())


@wrap_function(core.LATR)
def LATR(period: int = 14):
    return FuncIndicator.wrap(core.LATR, params=locals())


@wrap_function(core.SAR)
def SAR(afs: float = 0.02, maxaf: float = 0.2):
    return FuncIndicator.wrap(core.SAR, params=locals())


@wrap_function(core.CCI)
def CCI(period: int = 20):
    return FuncIndicator.wrap(core.CCI, params=locals())


@wrap_function(core.CMF)
def CMF(period: int = 20):
    return FuncIndicator.wrap(core.CMF, params=locals())


@wrap_function(core.MFI)
def MFI(period: int = 14):
    return FuncIndicator.wrap(core.MFI, params=locals())


@wrap_function(core.BOP)
def BOP(period: int = 20):
    return FuncIndicator.wrap(core.BOP, params=locals())


@wrap_function(core.BBANDS)
def BBANDS(period: int = 20, nbdev: float = 2.0):
    return FuncIndicator.wrap(core.BBANDS, params=locals())


@wrap_function(core.KELTNER)
def KELTNER(period: int = 20, nbatr: float = 2.0):
    return FuncIndicator.wrap(core.KELTNER, params=locals())


@wrap_function(core.KER)
def KER(period: int = 10, *, item: str = None):
    return FuncIndicator.wrap(core.KER, params=locals())


@wrap_function(core.KAMA)
def KAMA(period: int = 10, fastn: int = 2, slown: int = 30, *, item: str = None):
    return FuncIndicator.wrap(core.KAMA, params=locals())


@wrap_function(core.MACD)
def MACD(n1: int = 12, n2: int = 26, n3: int = 9, *, item: str = None):
    return FuncIndicator.wrap(core.MACD, params=locals())


@wrap_function(core.PPO)
def PPO(n1: int = 12, n2: int = 26, n3: int = 9, *, item: str = None):
    return FuncIndicator.wrap(core.PPO, params=locals())


@wrap_function(core.SLOPE)
def SLOPE(period: int = 20, *, item: str = None):
    return FuncIndicator.wrap(core.SLOPE, params=locals())


@wrap_function(core.RVALUE)
def RVALUE(period: int = 20, *, item: str = None):
    return FuncIndicator.wrap(core.RVALUE, params=locals())


@wrap_function(core.FORECAST)
def FORECAST(period: int = 20, offset: int = 0, *, item: str = None):
    return FuncIndicator.wrap(core.FORECAST, params=locals())


@wrap_function(core.STOCH)
def STOCH(period: int = 14, fastn: int = 3, slown: int = 3):
    return FuncIndicator.wrap(core.STOCH, params=locals())


@wrap_function(core.STREAK)
def STREAK(*, item: str = None):
    return FuncIndicator.wrap(core.STREAK, params=locals())


@wrap_function(core.EVAL)
def EVAL(expr: str):
    return FuncIndicator.wrap(core.EVAL, params=locals())


__all__ = [name for name in dir() if name.isupper()]
